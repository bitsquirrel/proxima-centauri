using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net.Http.Headers;
using System.Windows.Forms;
using Microsoft.Dynamics.AX.Metadata;
using Microsoft.Dynamics.AX.Metadata.MetaModel;
using Microsoft.Dynamics.AX.Metadata.MetaModel.Extensions;
using Microsoft.Dynamics.Framework.Tools.MetaModel;
using Microsoft.Dynamics.Framework.Tools.ProjectSystem;

namespace Functions_for_Dynamics_Operations
{
    public class MethodFunc : ClassFunc
    {
        public static void CreateParmMethodsOnClass(string className, string selection)
        {
            AxClass axClass = VStudioUtils.GetSelectedProjectOrFirstActiveProject().DesignMetaModelService.GetClass(className);
            if (axClass != null)
            {
                if (selection.Contains(Environment.NewLine))
                {
                    string[] selections = selection.Split(';');
                    foreach (string selected in selections)
                    {
                        if (selected.Length > 1)
                            CraeatParmMethod(axClass, selected);
                    }
                }
                else
                {
                    CraeatParmMethod(axClass, selection);
                }
            }
        }

        private static void CraeatParmMethod(AxClass axClass, string selection)
        {
            List<ContractParms> contractParms = ParmStrip(selection);

            foreach (ContractParms contract in contractParms)
            {
                string name = $"parm{char.ToUpper(contract.Name.First()) + contract.Name.Substring(1)}";

                VSProjectNode vSProjectNode = VStudioUtils.GetSelectedProjectOrFirstActiveProject();

                if (!axClass.Methods.Contains(name))
                {
                    AxMethod method = new AxMethod
                    {
                        Name = name,
                        Source = ParmMethodContractSource(name, contract.Name, contract.Edt, vSProjectNode.GetProjectsModelInfo().Name)
                    };

                    axClass.Methods.Add(method);

                    vSProjectNode.DesignMetaModelService.CurrentMetadataProvider.Classes.Update(axClass, new ModelSaveInfo(vSProjectNode.GetProjectsModelInfo()));
                }
            }
        }

        internal static List<ContractParms> ParmStrip(string selection)
        {
            List<ContractParms> contractParms = new List<ContractParms>();
            // Trim the buff
            selection = selection.Trim();
            // Replace any semi colon
            selection = selection.Replace(";", "");
            // Drop everything after and including the equals sign
            if (selection.Contains("="))
            {
                selection = selection.Substring(0, selection.IndexOf("="));
            }
            // Remove prefix public 
            string[] strings = selection.Split(' ');
            string edt = "";

            foreach (string s in strings) 
            {
                string c = s.ToLower().Trim();

                if (c == "" || c == "public" || c == "private" || c == "const" || c == "internal")
                { continue; }

                if (edt == "")
                    edt = s.Trim();
                else
                    contractParms.Add(new ContractParms() { Edt = edt, Name = s.Replace(",", "").Trim() });
            }

            return contractParms;
        }


        public static void CommentMethods(Microsoft.Dynamics.AX.Metadata.Core.Collections.KeyedObjectCollection<AxMethod> axMethods)
        {
            foreach (AxMethod method in axMethods)
            {
                if (!method.Source.Contains("///"))
                {
                    string comm = "    /// <summary>" + Environment.NewLine;
                    comm += $"    /// Autogenerated comment for method {method.Name}" + Environment.NewLine;
                    comm += "    /// </summary>" + Environment.NewLine;

                    foreach (AxMethodParameter parm in method.Parameters)
                    {
                        comm += $"    /// <param name = \"{parm.Name}\">Inbound parameter {parm.Name}</param>{Environment.NewLine}";
                    }

                    if (method.ReturnType.Type != Microsoft.Dynamics.AX.Metadata.Core.MetaModel.CompilerBaseType.Void)
                    {
                        string name = (method.ReturnType.TypeName != null && method.ReturnType.TypeName != "") ? method.ReturnType.TypeName : method.ReturnType.Type.ToString();

                        comm += $"    /// <returns>return {name} value</returns>{Environment.NewLine}";
                    }

                    method.Source = $"{comm}{method.Source}";
                }
            }
        }

        public string CreateConstructMethodForClass(string className)
        {
            AxClass cocClass = VStudioUtils.GetDesignMetaModelService().GetClass(className);
            string method = "";

            if (!cocClass.Methods.Contains("construct"))
            {
                method += "/// <summary>" + Environment.NewLine;
                method += "    /// Construct method" + Environment.NewLine;
                method += "    /// </summary>" + Environment.NewLine;
                method += $"    /// <returns>Construct method for class {className}</returns>" + Environment.NewLine;
                method += $"    public static {cocClass.Name} construct(){Environment.NewLine}";
                method += "    {" + Environment.NewLine;
                method += $"        {cocClass.Name} {cocClass.Name.ToLower()} = new {cocClass.Name}();{Environment.NewLine}";
                method += "         " + Environment.NewLine;
                method += $"        return {cocClass.Name.ToLower()};{Environment.NewLine}";
                method += "    }" + Environment.NewLine;
            }

            return method;
        }
    }
}
